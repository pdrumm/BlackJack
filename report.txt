Patrick Drumm
Lab 4, cse20212


MonkeySort results:
Shuffles for 7 card deck: [8037, 1913, 1799]
Shuffles for 8 card deck: [27823, 88324, 20899]
Shuffles for 9 card deck: [253478, 801279, 404012]


User's Perspective:
	From the user's perspective, this program is a fun game to play! The program simulates BlackJack, a popular card game. This game typically involves betting, however this program does not implement that. This program also simplifies a few rules. For example, an ace is always worth 11 point, the players are not given the option to split, and if a player and the dealer ever tie then the dealer automatically wins.
	The program begins by asking the user how many computer players will be at the table. The user may enter any nonnegative number, and this number of computers will be fixed for the remaineder of the BlackJack game. Once that is entered, the program will then display the initial hands on the table. Each hand is preceded by the player "name". The user's hand will always display the sum of his/her cards, for their convenience. The user can see the other player's first cards, but not their second cards(as in BlackJack the second card is face-down). Next, the computer players will go. Note, if there are no computer players, this step is skipped. By default, the computer players play according to the same rules as the dealer. They will stay if their sum is above 16, and hit otherwise. After the computers go, the new hands are displayed, with the sum of the computer's hands and their "status"(stay,21,or bust).
	Next, the user is prompted to play. They have two options: hit or stay. No matter which they choose, the updated hand is displayed next. Then, if the user selected hit, they will be prompted again whether to hit or stay - that is, unless they have reached a sum of 21 or higher. Once the user has either selected to stay, or they have reached a sum above 20, their turn will end.
	Once the user's turn is over, it is the dealer's turn. The dealer will continue to hit until their sum reaches 17 or higher. The final hands are then displayed with all sums and all statuses.
	Finally, the program prints who has won that round, and then asks the user if they would like to play another round. Selecting yes starts the same process over again. When the user finally decides to stop, the game ends, and the total wins for each player over all of the rounds played are displayed.


Programmer's Perspective:
	From a programmer's perspective, this lab is a good example of how to make a generalized class, that can then be implemented in many different settings. For this lab(Part 2), we made a class CardDeck. This deck had functions and variables common to a deck of cards used in almost any game involving cards(shuffle, deal, etc). We then used CardDeck for both the monkey sort program and the BlackJack program.
	My BlackJack program is composed of three main classes: BlackJack, CardDeck, and Player. I used composition for this lab, so BlackJack had both a CardDeck and a Player deque. My logic behind this was that my BlackJack class would have general functions to begin and start each round, and it would also be able to allow interaction between the cards in the CardDeck and the cards in the Player hands. I overloaded the '>' operator to "send" a card from the current deck to the game player's hand.
	To start the game, an instance of the BlackJack class is instantiated. The constructor(non-default) takes in the number of computer players as an argument. The constructor then adds to the deque of gameplayers(calling the Player (non-default) constructor): 1 user, 1 dealer, and x compuer players. The driver program then enters a while loop, which plays through a round and repeats until the user chooses to stop playing.
	At the start of the round, the program calls for a newRound(), which shuffles the deck and deals each player 2 cards. When cards are dealt, the first card in the deck is added to the end of the player's hand, and then that card is poped from the front of the deque. If after popping a value, there are less than 15 cards in the deck, 52 new cards are added. It is important to note that the values in the deck range from 0-51, while the values in the player hand range from 1-13(using the modulus operator).
	The output operator is overloaded for both the BlackJack and Player classes. When cout<<BlackJack is called, this also calls cout<<Player for every player. The display varies based on what players have had their turn(ie. the process of the current round). When the Player is outputted, it displays their hand, substituting letters for certain numbers(eg. an 11 would display 'J').
	For this program, both the computer players and the dealer play according to the same "algorithm". They will continue hitting until they reach 17 and then stay. For the user, they are given the option to stay or hit, and are dealt one card at a time until either they opt to stay or their hand sum reaches above 20.
	After everyone has played through, the winners() function uses each players' hand sum to determine who the winner(s) is(are). The program then outputs who won the round and additionally keeps track of how many rounds each player has won. This total win count is displayed after the user decides that they are done playing and would like to quit the program. If the user wants to keep playing, then the hands will be reset, the deck will be shuffled, and then new hands will be dealt again!


Evaluation for Correctness:
	This program required some logic and a bit of trial and error to evaluate for correctness. For both the overloaded output of Player, and the calculation of the winners at the end of each round, I used a couple fairly long logical expressions. I wrote them down on paper and used some logic laws to confirm that they were executing what I had in mind.
	Some of the trial and error involved when players stayed vs bust and their hand sum. A lot of it had to do with me not thinking of something until I saw that the output was not as I expected it to be. For example, The program was outputting sums that were too high. I realized that this was because, even though I changed the numbers 1,11,12,13 to A,J,Q,K in the output, I forgot to change the values of these when calculating the hand sums.
	Another trial and error that I had to deal with was how the output was displayed. It took a number of trials for me to decide what I wanted the game display to look like, and then another few trials to get it right. For example, I wanted the hand sums and player statuses for a specific player to display only after that player had taken their turn. However, I also wanted the user sum to display always, while their status only display after the user's turn was over.
